browseURL(paste0(url_list[1]))  # 정상작동 확인(웹브라우저 실행)
library(XML)        # install.packages("XML")
dir.create("02_raw_data") # 새로운 폴더 만들기
# 데이터 로드 및 변환
loc <- read.csv("./시군구코드.csv", header = TRUE, fileEncoding = "UTF-8")
# 데이터 로드 및 변환
loc <- read.csv("시군구코드.csv", header = TRUE, fileEncoding = "UTF-8")
datelist <- seq(from = as.Date('2021-01-01'), # 시작
to   = as.Date('2021-12-31'), # 종료
by    = '1 month')            # 단위
# 인증키 및 URL 생성
service_key <- "kRabKsGy7tAGj4QAUALeERMUL51wHlWECAkNpryGNmFTKPJtEecz83pKP1LVwHz%2BzSYPv40izA5a5%2BGcXmPLaQ%3D%3D"
url_list <- list() # 빈 리스트 만들기
cnt <-0	           # 반복문의 제어 변수 초깃값 설정
for(i in 1:nrow(loc)){           # 외부반복: 25개 자치구
for(j in 1:length(datelist)){  # 내부반복: 12개월
cnt <- cnt + 1               # 반복누적 카운팅
#---# 요청 목록 채우기 (25 X 12= 300)
url_list[cnt] <- paste0("http://apis.data.go.kr/1613000/RTMSDataSvcAptTrade/getRTMSDataSvcAptTrade?",
"serviceKey=", service_key,  # 인증키
"&LAWD_CD=", loc[i,1],       # 지역코드
"&DEAL_YMD=", datelist[j],   # 수집월
"&numOfRows=", 1000)         # 한번에 가져올 최대 자료 수
}                                                      # (한달에 한 지역에 1,000건 이상 거래는 거의 없을테니 최대값 설정 / 미설정시 10건만 가져옴)
Sys.sleep(0.1)                                          # 0.1초간 멈춤
msg <- paste0("[", i,"/",nrow(loc), "]  ", loc[i,3], " 의 크롤링 목록이 생성됨 => 총 [", cnt,"] 건") # 알림 메시지
cat(msg, "\n\n")
}
length(url_list)                # 요청목록 갯수 확인
browseURL(paste0(url_list[1]))  # 정상작동 확인(웹브라우저 실행)
library(XML)        # install.packages("XML")
library(data.table) # install.packages("data.table")
library(stringr)    # install.packages("stringr")
raw_data <- list()        # xml 임시 저장소
root_Node <- list()       # 거래내역 추출 임시 저장소
total <- list()           # 거래내역 정리 임시 저장소
dir.create("02_raw_data") # 새로운 폴더 만들기
for(i in 1:length(url_list)){   # 요청목록(url_list) 반복
raw_data[[i]] <- xmlTreeParse(url_list[i], useInternalNodes = TRUE,encoding = "utf-8") # 결과 저장
root_Node[[i]] <- xmlRoot(raw_data[[i]])	# xmlRoot로 추출
#---# [3단계: 전체 거래 건수 확인]
items <- root_Node[[i]][[2]][['items']]  # 전체 거래내역(items) 추출
size <- xmlSize(items)                   # 전체 거래 건수 확인
#---# [4단계: 거래 내역 추출]
item <- list()                # 전체 거래내역(items) 저장 임시 리스트 생성
item_temp_dt <- data.table()  # 세부 거래내역(item) 저장 임시 테이블 생성
Sys.sleep(.1)                 # 0.1초 멈춤
for(m in 1:size){                                     # 전체 거래건수(size)만큼 반복
#---# 세부 거래내역 분리
item_temp <- xmlSApply(items[[m]],xmlValue)
item_temp_dt <- data.table(year = item_temp[10],    # 거래 년 (dealYear)
month = item_temp[9],    # 거래 월 (dealMonth)
day = item_temp[8],      # 거래 일 (dealDay)
price = item_temp[7],    # 거래금액 (dealAmount)
code = item_temp[18],    # 지역코드 (sggCd)
dong_nm = item_temp[20], # 읍면동 이름 (umdNm)
jibun = item_temp[15],   # 지번 (jibun)
con_year = item_temp[3], # 건축년도 (buildYear)
apt_nm = item_temp[2],   # 아파트 이름 (aptNm)
area = item_temp[13],    # 전용면적 (excluUseAr)
floor = item_temp[14])   # 층수 (floor)
item[[m]] <- item_temp_dt}                          #---# 분리된 거래내역 순서대로 저장
apt_bind <- rbindlist(item)                           # 통합 저장
#---# [5단계: 응답 내역 저장]
region_nm <- subset(loc, code == regmatches(url_list[i], regexpr("(?<=LAWD_CD=)[^&]*", url_list[i], perl=TRUE)))[,4] # 지역명 추출
month <- gsub(".*DEAL_YMD=(\\d{6}).*", "\\1", url_list[i])                                                           # 연월(YYYYMM) 추출
path <- as.character(paste0("./02_raw_data/", region_nm, "_", month,".csv"))                # 저장위치 설정
write.csv(apt_bind, path)                                                                   # csv 저장
msg <- paste0("[", i,"/",length(url_list), "] 수집한 데이터를 [", path,"]에 저장 합니다.")  # 알림 메시지
cat(msg, "\n\n")
}                                                                                             # 바깥쪽 반복문 종료
install.packages("rgdal", repos="http://R-Forge.R-project.org")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
load("./data/2021/geodataframe/apt_price.rdata")
library(sf)
grid <- st_read("./data/sigun_grid/seoul.shp")
apt_price <- st_join(apt_price, grid, join = st_intersects)
head(apt_price,2)
kde_high <- aggregate(apt_price$py, by=list(apt_price$ID), mean)
colnames(kde_high) <- c("ID", "avg_price")
head(kde_high,2)
kde_high <- merge(grid, kde_high, by="ID")
library(ggplot2)
library(dplyr)
##격제 밀집도 평균 가격 높은 건 red, 낮은값 white
kde_high %>% ggplot(aes(fill= avg_price))+geom_sf()+scale_fill_gradient(low= "white", high = "red")
##---------------------------------------------------------------------------------시작
library(sp)
kde_high_sp <- as(st_geometry(kde_high), "Spatial")
x <- coordinates(kde_high_sp)[,1]
y <- coordinates(kde_high_sp)[,2]
l1  <- bbox(kde_high_sp)[1,1] - (bbox(kde_high_sp)[1,1]*0.0001)
l2 <- bbox(kde_high_sp)[1,2] + (bbox(kde_high_sp)[1,2]*0.0001)
l3 <- bbox(kde_high_sp)[2,1] - (bbox(kde_high_sp)[2,1]*0.0001)
l4 <- bbox(kde_high_sp)[2,2] + (bbox(kde_high_sp)[1,1]*0.0001)
library(spatstat)
win<-owin(xrange= c(l1 ,l2), yrange=c(l3,l4))
##지도 경계선
plot(win)
rm(list = c("kde_high_sp", "apt_price", "l1","l2","l3","l4"))
##밀도 그래프
p<- ppp(x,y,window = win)
d<- density.ppp(p, weights = kde_high$avg_price, sigma = bw.diggle(p), kernel = 'gaussian')
plot(d)
rm(list = c("x","y", "win", "p"))
##---------------------------------------------------------------------------------끝
##---------------------------------------------------------------------------------시작
##노이즈제거 와 래스터 이미지로 변화
d[d < quantile(d)[4] +(quantile(d)[4]*0.1)] <-NA
library(sf)
library(sp)
library(raster)
raster_high<-raster(d)
plot(raster_high)
##---------------------------------------------------------------------------------끝
# 서울의 경계 데이터를 읽어옵니다 (sf 객체)
bnd <- st_read("./data/sigun_grid/seoul.shp")
# raster_high 객체를 bnd_sp의 범위로 자릅니다 (crop)
raster_high <- crop(raster_high, extent(bnd))
# 좌표 참조 체계 (CRS)를 설정
crs(raster_high) <- sp::CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# 결과를 시각화
plot(raster_high)
plot(bnd, col=NA, border="red", add=TRUE)
library(rgdal)
library(leaflet)
#leaflet() %>%
#  addProviderTiles(providers$CartoDB.Positron) %>%
#  addPolygons(data =bnd, weight = 3, color = "red", fill= NA) %>%
#  addRasterImage(raster_high, colors = colorNumeric(c("blue", "green", "yellow","red"), values(raster_high), na.color = "transparent"), opacity = 0.4)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = bnd, weight = 1, color = "gray", fill = NA) %>%
addRasterImage(raster_high,
colors = colorNumeric(c("blue", "green", "yellow", "red"),
values(raster_high), na.color = "transparent"),
opacity = 0.4)
kde_after<- aggregate(kde_after$py, by=list(kde_after$ID),mean)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
load("./data/2021/geodataframe/apt_price.rdata")
grid<-st_read("./data/sigun_grid/seoul.shp")
apt_price<-st_join(apt_price, grid,join= st_intersects)
head(apt_price,2)
kde_before <- subset(apt_price,dealDate < "2021-07-01")
kde_before<- aggregate(kde_before$py, by=list(kde_before$ID),mean)
colnames(kde_before)<- c("ID", "before")
kde_after <- subset(apt_price,dealDate > "2021-07-01")
kde_after<- aggregate(kde_after$py, by=list(kde_after$ID),mean)
colnames(kde_after)<- c("ID", "after")
kde_diff<- merge(kde_before,kde_after, by="ID")
kde_diff$diff<-round((((kde_diff$after-kde_diff$before)/kde_diff$before)*100),0)
head(kde_diff,2)
library(sf)
kde_diff <-kde_diff[kde_diff$diff >0 ,]
kde_hot <- merge(grid, kde_diff, by="ID")
library(ggplot2)
library(dplyr)
kde_hot %>% ggplot(aes(fill = diff)) + geom_sf()+ scale_fill_gradient(low= "white", high="red")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
load("./data/2021/geodataframe/apt_price.rdata")
grid<-st_read("./data/sigun_grid/seoul.shp")
apt_price<-st_join(apt_price, grid,join= st_intersects)
head(apt_price,2)
kde_before <- subset(apt_price,dealDate < "2021-07-01")
kde_before<- aggregate(kde_before$py, by=list(kde_before$ID),mean)
colnames(kde_before)<- c("ID", "before")
kde_after <- subset(apt_price,dealDate > "2021-07-01")
kde_after<- aggregate(kde_after$py, by=list(kde_after$ID),mean)
colnames(kde_after)<- c("ID", "after")
kde_diff<- merge(kde_before,kde_after, by="ID")
kde_diff$diff<-round((((kde_diff$after-kde_diff$before)/kde_diff$before)*100),0)
head(kde_diff,2)
library(sf)
kde_diff <-kde_diff[kde_diff$diff >0 ,]
kde_hot <- merge(grid, kde_diff, by="ID")
library(ggplot2)
library(dplyr)
kde_hot %>% ggplot(aes(fill = diff)) + geom_sf()+ scale_fill_gradient(low= "white", high="red")
# raster_high 객체를 bnd_sp의 범위로 자릅니다 (crop)
raster_hot <- crop(raster_hot, extent(kde_hot))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
load("./data/2021/geodataframe/apt_price.rdata")
grid<-st_read("./data/sigun_grid/seoul.shp")
apt_price<-st_join(apt_price, grid,join= st_intersects)
head(apt_price,2)
kde_before <- subset(apt_price,dealDate < "2021-07-01")
kde_before<- aggregate(kde_before$py, by=list(kde_before$ID),mean)
colnames(kde_before)<- c("ID", "before")
kde_after <- subset(apt_price,dealDate > "2021-07-01")
kde_after<- aggregate(kde_after$py, by=list(kde_after$ID),mean)
colnames(kde_after)<- c("ID", "after")
kde_diff<- merge(kde_before,kde_after, by="ID")
kde_diff$diff<-round((((kde_diff$after-kde_diff$before)/kde_diff$before)*100),0)
head(kde_diff,2)
library(sf)
kde_diff <-kde_diff[kde_diff$diff >0 ,]
kde_hot <- merge(grid, kde_diff, by="ID")
library(ggplot2)
library(dplyr)
kde_hot %>% ggplot(aes(fill = diff)) + geom_sf()+ scale_fill_gradient(low= "white", high="red")
#---# [4단계: 지도경계선 그리기]
library(sp)   # install.packages("sp")
kde_hot_sp <- as(st_geometry(kde_hot), "Spatial") # sf형 => sp형 변환
x <- coordinates(kde_hot_sp)[,1]  # 그리드 x, y 좌표 추출
y <- coordinates(kde_hot_sp)[,2]
l1 <- bbox(kde_hot_sp)[1,1] - (bbox(kde_hot_sp)[1,1]*0.0001) # 그리드 기준 경계지점 설정
l2 <- bbox(kde_hot_sp)[1,2] + (bbox(kde_hot_sp)[1,2]*0.0001)
l3 <- bbox(kde_hot_sp)[2,1] - (bbox(kde_hot_sp)[2,1]*0.0001)
l4 <- bbox(kde_hot_sp)[2,2] + (bbox(kde_hot_sp)[1,1]*0.0001)
library(spatstat)  # install.packages("spatstat")
win <- owin(xrange=c(l1,l2), yrange=c(l3,l4))  # 경계지점 기준 외곽선 만들기(bounding-box)
plot(win)                                      # 확인
rm(list = c("kde_hot_sp", "apt_price", "l1", "l2", "l3", "l4")) # 메모리 정리
#---# [5단계: 밀도 그래프 변환하기]
p <- ppp(x, y, window=win, marks=kde_hot$diff) # 경계창 위에 좌표값 포인트 생성
d <- density.ppp(p, weights=kde_hot$diff,      # 포인트를 커널밀도 함수로 변환
sigma = bw.diggle(p),
kernel = 'gaussian')
plot(d)   # 확인
rm(list = c("x", "y", "win","p")) # 변수 정리
#---# [6단계: 픽셀 -> 레스터 변환]
d[d < quantile(d)[4] + (quantile(d)[4]*0.1)] <- NA  # 노이즈 제거
library(raster)         # install.packages("raster")
raster_hot <- raster(d) # 레스터 변환
plot(raster_hot) #  확인
#---# [7단계: 클리핑]
bnd <- st_read("./data/sigun_grid/seoul.shp") # 서울시 경계선 불러오기
raster_hot <- crop(raster_hot, extent(bnd))            # 외곽선 클리핑
crs(raster_hot) <- sp::CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84
+towgs84=0,0,0")  # 좌표계 정의
plot(raster_hot)   #  확인
plot(bnd, col=NA, border = "red", add=TRUE)
#---# [8단계: 지도 그리기]
library(leaflet)   # install.packages("leaflet")
leaflet() %>%
#---# 베이스맵 불러오기
addProviderTiles(providers$CartoDB.Positron) %>%
#---# 서울시 경계선 불러오기
addPolygons(data = bnd, weight = 3, color= "red", fill = NA) %>%
#---# 레스터 이미지 불러오기
addRasterImage(raster_hot,
colors = colorNumeric(c("blue", "green", "yellow","red"),
values(raster_hot), na.color = "transparent"), opacity = 0.4)
